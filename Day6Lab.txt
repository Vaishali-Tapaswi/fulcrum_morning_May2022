Basics - https://www.enterpriseintegrationpatterns.com/
      -> PS, P2P, Aggregator, Splitter
Lab1 - 
      Maven - Day6.demo1.streams, add dependencies - Spring Integration
      Modify POM file to include  
                  <dependency>
                    <groupId>org.springframework.integration</groupId>
                    <artifactId>spring-integration-stream</artifactId>
                 </dependency>
         -> check for file, http, ftp, jms
        
     Create demo.StreamApplication.java
            package demo;

            @SpringBootApplication
            public class StreamApplication {

              public static void main(String[] args) {
                  SpringApplication.run(StreamApplication.class, args);
                }
            }
     
     Create demo.MyConfig.java
     
              package demo;


              import org.springframework.context.annotation.Bean;
              import org.springframework.context.annotation.Configuration;
              import org.springframework.integration.annotation.InboundChannelAdapter;
              import org.springframework.integration.annotation.Poller;
              import org.springframework.integration.annotation.ServiceActivator;
              import org.springframework.integration.channel.DirectChannel;
              import org.springframework.integration.channel.QueueChannel;
              import org.springframework.integration.config.EnableIntegration;
              import org.springframework.integration.core.MessageSource;
              import org.springframework.integration.stream.CharacterStreamReadingMessageSource;
              import org.springframework.integration.stream.CharacterStreamWritingMessageHandler;
              import org.springframework.messaging.MessageChannel;
              import org.springframework.messaging.MessageHandler;

              import java.io.InputStreamReader;
              import java.io.OutputStreamWriter;

              @Configuration
              //@EnableIntegration
              public class MyConfig {
                  @Bean
                  public MessageChannel strchannel(){
                   //   return  new QueueChannel(5);
                      return new DirectChannel();
                  }

                  @Bean
                  @InboundChannelAdapter(value = "strchannel",poller = @Poller(fixedRate = "500"))
                  public MessageSource<String> streamReading() {
                      CharacterStreamReadingMessageSource sourceReader = new CharacterStreamReadingMessageSource(
                              new InputStreamReader(System.in));
                      return sourceReader;
                  }
                  @Bean
                  @ServiceActivator(inputChannel = "strchannel")
                  public MessageHandler streamWriting1() {
                      System.out.println("in StreamWriting11");
                      CharacterStreamWritingMessageHandler handler = new CharacterStreamWritingMessageHandler(
                              new OutputStreamWriter(System.out));
                      return handler;
                  }
              }

      Run -> give multiple inputs -> enter after every input
              modify @Poller time interval 
                check some message getting lost
            Modify DirectChannel to QueueChannel (5) 
                check the same , no or minimum message loss (capacity 5)
                
Lab 2 -     

            ---> @Bean annoation for channel 
            Create one more MesageHandler as streamWriting2
                  replace System.out with System.err 
            Run the same again and observe
                  Messages handled by streamWriting1 or streamWriting2 (Point to Point/Pollable / Only one consumer per message)
            Replace 
                  return new DirectChannel();
                  with 
                        return new PublishSubscribeChannel();
            Run the same again and observe
                  Messages handled by  both streamWriting1 or streamWriting2
                  (Publish Subscribe  / Multiple  consumers per message)


Lab 3 - Same like Lab1 but file instead of stream
            Day6.demo2.files
      Modify pom file to include 
                  <dependency>
                        <groupId>org.springframework.integration</groupId>
                        <artifactId>spring-integration-file</artifactId>
                  <dependency>
      Modify MyConfig
            package demo;


            import org.springframework.context.annotation.Bean;
            import org.springframework.context.annotation.Configuration;
            import org.springframework.integration.annotation.InboundChannelAdapter;
            import org.springframework.integration.annotation.Poller;
            import org.springframework.integration.annotation.ServiceActivator;
            import org.springframework.integration.channel.PublishSubscribeChannel;
            import org.springframework.integration.channel.QueueChannel;
            import org.springframework.integration.core.MessageSource;
            import org.springframework.integration.file.FileReadingMessageSource;
            import org.springframework.integration.file.FileWritingMessageHandler;

            import org.springframework.integration.file.support.FileExistsMode;
            import org.springframework.messaging.MessageChannel;
            import org.springframework.messaging.MessageHandler;

            import java.io.File;

            @Configuration
            //@EnableIntegration
            public class MyConfig {
                final String inputdir = "C:\\tt\\inputdir";
                final String outputdir1 = "C:\\tt\\ouputdir1";
                final String outputdir2 = "C:\\tt\\ouputdir2";

                @Bean
                public MessageChannel filechannel(){
                //   return new QueueChannel(4);
                    return new PublishSubscribeChannel();
                }

                @Bean
                @InboundChannelAdapter(channel = "filechannel",poller = @Poller(fixedRate = "500"))
                public MessageSource<File> fileReading() {
                    FileReadingMessageSource sourceReader = new FileReadingMessageSource();
                    sourceReader.setDirectory(new File(inputdir));
                     return sourceReader;
                }
                @Bean
                @ServiceActivator(inputChannel = "filechannel")
                public MessageHandler filewriting1() {
                    FileWritingMessageHandler handler = new FileWritingMessageHandler(new File(outputdir1));
                    handler.setFileExistsMode(FileExistsMode.REPLACE);
                    handler.setExpectReply(false);
                    return handler;
                }
            }

      Run -> 
            copy files in inputdir -> observe files created in outputdir1
            Create two handler for different directories
                  Check -> 1. QueueChannel
                           2. PublishSubscribeChannel
            
