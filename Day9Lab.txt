Lab 3- http://localhost:8085/api-docs
    -> download json and save this as app.json on localmachine
    ->go to  https://editor.swagger.io/
            File->import file -> choose app.json
            check file -> save as yml
            Generate Server -> Spring
                download zip and extract and open it in Intelli
                run 
    =? Check plugin configuration of swagger codegen

Lab 2 - Maven proj -Day9.demo2.swagger (copy of Day2.demo1.custom)
    Enable Swagger
      POM file -> add 
                <dependency>
                    <groupId>org.springdoc</groupId>
                    <artifactId>springdoc-openapi-ui</artifactId>
                    <version>1.6.8</version>
                </dependency>
     Create/Modify Application.yml
      springdoc:
        swagger-ui:
         path: /swagger-ui.html
        api-docs:
         path: /api-docs
  Test -> http://localhost:8085/api-docs
          http://localhost:8085/swagger-ui.html
 
Lab 1 - 
  https://docs.spring.io/spring-integration/reference/html/http.html#http-java-config
    http://localhost:8080/simple -> hello from Spring integration
  Maven -> Day9.demo1.httpinbound
    Add dependencies - SPring integration, Spring Web
  Write demo.Config.java
        package demo;

        import org.springframework.boot.autoconfigure.integration.IntegrationProperties;
        import org.springframework.context.annotation.Bean;
        import org.springframework.context.annotation.Configuration;
        import org.springframework.http.HttpMethod;
        import org.springframework.integration.annotation.ServiceActivator;
        import org.springframework.integration.channel.QueueChannel;
        import org.springframework.integration.http.inbound.HttpRequestHandlingMessagingGateway;
        import org.springframework.integration.http.inbound.RequestMapping;
        import org.springframework.messaging.Message;

        import java.util.function.Function;


        @Configuration
        public class MyConfig {
            @Bean
            public QueueChannel myhttpRequest(){
                return new QueueChannel(5);
            }
            @Bean
            public QueueChannel myhttpResp(){
                return new QueueChannel(5);
            }
            @Bean
            public HttpRequestHandlingMessagingGateway inbound() {
                HttpRequestHandlingMessagingGateway gateway =
                        new HttpRequestHandlingMessagingGateway(true);
                gateway.setRequestMapping(mapping());
            //    gateway.setRequestPayloadType(String.class);
                gateway.setRequestChannelName("myhttpRequest");
                gateway.setReplyChannelName("myhttpResp");
                gateway.setReplyTimeout(12000);
                return gateway;
            }

            @Bean
            public RequestMapping mapping() {
                RequestMapping requestMapping = new RequestMapping();
                requestMapping.setPathPatterns("/foo");
                requestMapping.setMethods(HttpMethod.GET);
                return requestMapping;
            }

            @Bean
            @ServiceActivator( inputChannel = "myhttpRequest",outputChannel = "myhttpResp")
            public Function<Message<?>, String> handler() {
                return new Function<Message<?>, String>() {
                    public String apply(Message<?> message) {
                        System.out.println("myHandler Payload : " + message.getPayload());
                        System.out.println("myHandler Header: " + message.getHeaders());
                        return "Spring Integration as REST API";
                    }

                };
            }
        }

test - http://localhost:8080/foo
  
