Lab 2- https://www.javainuse.com/spring/boot-jwt

Lab1 - Create simple web project with security
  Maven ->   Day10.demo1.security   ( dependency  - Spring Web )
  demo. Application.java
          package demo;

          import org.springframework.boot.SpringApplication;
          import org.springframework.boot.autoconfigure.SpringBootApplication;

          @SpringBootApplication
          public class Application {

              public static void main(String[] args) {

                  SpringApplication.run(Application.class, args);
              }
          }
 demo.MyController.java
      package demo;

      import org.springframework.web.bind.annotation.GetMapping;
      import org.springframework.web.bind.annotation.RequestMapping;
      import org.springframework.web.bind.annotation.RestController;

      @RestController
      @RequestMapping(value = "/")
      public class MyController {
          @GetMapping()
          public String index(){
              String str = "<h1><a href='admin/m1'>Admin m1 </a></h1>"+
                      "<h1><a href='admin/m2'>Admin m2 </a></h1>"+
                      "<h1><a href='simple'>Simple </a></h1>"+
                      "<H1>Index.html</H1>";
              return str;
          }
          @GetMapping(value="/simple")
          public String simple(){
              String str = "<H1>Simple html</H1>" +
                              "<h1><a href='/'>Home Page</a></h1>";
              return str;
          }


          @GetMapping(value="/admin/m1")
          public String m1(){
              String str = "<H1>Admin m1 html</H1>" +
                      "<h1><a href='/'>Home Page</a></h1>";
              return str;
          }

          @GetMapping(value="/admin/m2")
          public String m2(){
              String str = "<H1>Admin m2 html</H1>" +
                      "<h1><a href='/'>Home Page</a></h1>";
              return str;
          }
      }

Run -> Test it
Modify pom file to include 
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
Run -> login / password screen 

   Write demo.MyConfig.java
   
            package demo;

            import org.springframework.context.annotation.Bean;
            import org.springframework.context.annotation.Configuration;
            import org.springframework.security.config.annotation.web.builders.HttpSecurity;
            import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
            import org.springframework.security.core.userdetails.User;
            import org.springframework.security.core.userdetails.UserDetails;
            import org.springframework.security.core.userdetails.UserDetailsService;
            import org.springframework.security.provisioning.InMemoryUserDetailsManager;
            @Configuration
            public class MyConfig extends WebSecurityConfigurerAdapter {
              @Bean
              @Override
              public UserDetailsService userDetailsService() {
                UserDetails user =
                   User.withDefaultPasswordEncoder()
                    .username("user1")
                       .password("pass1")
                       .roles("admin")
                       .build();
                return new InMemoryUserDetailsManager(user);
              }
              @Override
              protected void configure(HttpSecurity http) throws Exception {
                http
                  .authorizeRequests()
                    .antMatchers("/", "/simple").permitAll()
                    .anyRequest().authenticated()
                    .and()
                    .httpBasic()
                  //	.formLogin()
                    .and()
                  .logout()
                    .permitAll();
              }
            }

  New Browser -> http://localhost:8080/ or /simple -> no auth required
                 http://localhost:8080/admin/m1 -> cancel - 401
                  user1,pass1 - valid user 
                      dev. tools - Network -> headers -> auth. 
                 postman -> auth -> user, pass -> auth header
  

